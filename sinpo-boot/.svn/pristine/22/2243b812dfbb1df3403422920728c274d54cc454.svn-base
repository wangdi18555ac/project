package com.sinpo.common.utils;

import org.apache.commons.compress.archivers.ArchiveEntry;
import org.apache.commons.compress.archivers.zip.Zip64Mode;
import org.apache.commons.compress.archivers.zip.ZipArchiveEntry;
import org.apache.commons.compress.archivers.zip.ZipArchiveInputStream;
import org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.IOUtils;

import java.io.*;
import java.util.Collection;
import java.util.Map;
import java.util.stream.Collectors;


/**
 * Zip文件工具类
 *
 * @author Luxh
 */
public class ZipFileUtil {

    /**
     * 把文件压缩成zip格式
     *
     * @param files       需要压缩的文件
     * @param zipFilePath 压缩后的zip文件路径 ,如"D:/test/aa.zip";
     */
    public static void compressFiles2Zip(File[] files, String zipFilePath) {
        if (files != null && files.length > 0) {
            ZipArchiveOutputStream zaos = null;
            try {
                File zipFile = new File(zipFilePath);
                zaos = new ZipArchiveOutputStream(zipFile);
                //Use Zip64 extensions for all entries where they are required
                zaos.setUseZip64(Zip64Mode.AsNeeded);
                //将每个文件用ZipArchiveEntry封装
                //再用ZipArchiveOutputStream写到压缩文件中
                for (File file : files) {
                    if (file != null) {
                        ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, file.getName());
                        zaos.putArchiveEntry(zipArchiveEntry);
                        InputStream is = null;
                        try {
                            is = new FileInputStream(file);
                            byte[] buffer = new byte[1024 * 5];
                            int len = -1;
                            while ((len = is.read(buffer)) != -1) {
                                //把缓冲区的字节写入到ZipArchiveEntry
                                zaos.write(buffer, 0, len);
                            }
                            //Writes all necessary data for this entry.
                            zaos.closeArchiveEntry();
                        } catch (Exception e) {
                            throw new RuntimeException(e);
                        } finally {
                            if (is != null)
                                is.close();
                        }
                    }
                }
                zaos.finish();
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (zaos != null) {
                        zaos.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void compressStreams2Zip(Map<String, InputStream> entrymap, OutputStream outputStream) {
        ZipArchiveOutputStream zaos = null;
        try {
            zaos = new ZipArchiveOutputStream(outputStream);
            //Use Zip64 extensions for all entries where they are required
            zaos.setUseZip64(Zip64Mode.AsNeeded);
            //将每个文件用ZipArchiveEntry封装
            //再用ZipArchiveOutputStream写到压缩文件中
            for (Map.Entry<String, InputStream> entry : entrymap.entrySet()) {
                String key = entry.getKey();
                InputStream value = entry.getValue();
                try {
                    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(key);
                    zaos.putArchiveEntry(zipArchiveEntry);
                    IOUtils.copy(value, zaos);
                    zaos.closeArchiveEntry();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            zaos.finish();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (zaos != null) zaos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static void compressFiles2Zip(Map<String, File> entrymap, OutputStream outputStream) {
        ZipArchiveOutputStream zaos = null;
        try {
            zaos = new ZipArchiveOutputStream(outputStream);
            //Use Zip64 extensions for all entries where they are required
            zaos.setUseZip64(Zip64Mode.AsNeeded);
            //将每个文件用ZipArchiveEntry封装
            //再用ZipArchiveOutputStream写到压缩文件中
            for (Map.Entry<String, File> entry : entrymap.entrySet()) {
                String key = entry.getKey();
                File file = entry.getValue();
                InputStream is = null;
                try {
                    ZipArchiveEntry zipArchiveEntry = new ZipArchiveEntry(file, key);
                    zaos.putArchiveEntry(zipArchiveEntry);

                    is = new FileInputStream(file);
                    IOUtils.copy(is, zaos);
                    zaos.closeArchiveEntry();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            zaos.finish();
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                if (zaos != null) zaos.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public static void compressFolder2Zip(File rootFolder, Collection<File> files, OutputStream outputStream) {
        if (files == null || files.size() == 0) {
            files = FileUtils.listFiles(rootFolder, null, true);
        }
        Map<String, File> entrymap = files.stream().collect(Collectors.toMap(
                file -> file.getAbsolutePath().substring(rootFolder.getAbsolutePath().length() + 1),
                file -> file)
        );
        compressFiles2Zip(entrymap, outputStream);
    }

    /**
     * 把zip文件解压到指定的文件夹
     *
     * @param zipFilePath zip文件路径, 如 "D:/test/aa.zip"
     * @param saveFileDir 解压后的文件存放路径, 如"D:/test/"
     */
    public static void decompressZip(String zipFilePath, String saveFileDir) {
        File file = new File(zipFilePath);
        if (file.exists()) {
            InputStream is = null;
            //can read Zip archives
            ZipArchiveInputStream zais = null;
            try {
                is = new FileInputStream(file);
                zais = new ZipArchiveInputStream(is);
                ArchiveEntry archiveEntry = null;
                //把zip包中的每个文件读取出来
                //然后把文件写到指定的文件夹
                while ((archiveEntry = zais.getNextEntry()) != null) {
                    //获取文件名
                    String entryFileName = archiveEntry.getName();
                    //构造解压出来的文件存放路径
                    String entryFilePath = saveFileDir + entryFileName;
                    byte[] content = new byte[(int) archiveEntry.getSize()];
                    zais.read(content);
                    OutputStream os = null;
                    try {
                        //把解压出来的文件写到指定路径
                        File entryFile = new File(entryFilePath);
                        os = new FileOutputStream(entryFile);
                        os.write(content);
                    } catch (IOException e) {
                        throw new IOException(e);
                    } finally {
                        if (os != null) {
                            os.flush();
                            os.close();
                        }
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                try {
                    if (zais != null) {
                        zais.close();
                    }
                    if (is != null) {
                        is.close();
                    }
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }

}
