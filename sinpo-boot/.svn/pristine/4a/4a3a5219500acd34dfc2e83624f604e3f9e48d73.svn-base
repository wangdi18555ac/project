package com.sinpo.common.utils;

import com.sun.xml.internal.messaging.saaj.packaging.mime.util.BASE64EncoderStream;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.DESKeySpec;
import javax.crypto.spec.SecretKeySpec;
import java.security.MessageDigest;
import java.security.SecureRandom;

/**
 * 加密工具类
 */

public class
EncryptionUtils {

    /**
     * DES加密
     * @param src
     * @param password
     * @return
     * @throws Exception
     */
    public static String encryptStringDES(String src,String password) throws Exception{
        byte[] bt = encryptbytesDES(src.getBytes(),password.getBytes());
        String strs = new BASE64Encoder().encode(bt);
        return strs;
    }

    private static byte[] encryptbytesDES(byte[] src,byte[] password) throws Exception {
        // 生成一个可信任的随机数源
        SecureRandom sr = new SecureRandom();

        // 从原始密钥数据创建DESKeySpec对象
        DESKeySpec dks = new DESKeySpec(password);

        // 创建一个密钥工厂，然后用它把DESKeySpec转换成SecretKey对象
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
        SecretKey securekey = keyFactory.generateSecret(dks);

        // Cipher对象实际完成加密操作
        Cipher cipher = Cipher.getInstance("DES");

        // 用密钥初始化Cipher对象
        cipher.init(Cipher.ENCRYPT_MODE, securekey, sr);

        return cipher.doFinal(src);
    }

    /**
     * DES解密
     * @param src
     * @param password
     * @return
     * @throws Exception
     */
    public static String decryptStringDES(String src,String password) throws Exception {
        if (src == null)
            return null;
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] buf = decoder.decodeBuffer(src);
        byte[] bt = decryptbytesDES(buf,password.getBytes());
        return new String(bt);
    }


    private static byte[] decryptbytesDES(byte[] src,byte[] password) throws Exception{
        // 生成一个可信任的随机数源
        SecureRandom sr = new SecureRandom();

        // 从原始密钥数据创建DESKeySpec对象
        DESKeySpec dks = new DESKeySpec(password);

        // 创建一个密钥工厂，然后用它把DESKeySpec转换成SecretKey对象
        SecretKeyFactory keyFactory = SecretKeyFactory.getInstance("DES");
        SecretKey securekey = keyFactory.generateSecret(dks);

        // Cipher对象实际完成解密操作
        Cipher cipher = Cipher.getInstance("DES");

        // 用密钥初始化Cipher对象
        cipher.init(Cipher.DECRYPT_MODE, securekey, sr);

        return cipher.doFinal(src);
    }

    /**
     * AES类型加密字符串
     * @param src
     * @param password
     * @return
     * @throws Exception
     */
    public static String encryptStringAES(String src,String password) throws Exception {
        byte[] bt = encryptbytesAES(src.getBytes(),password.getBytes());
        String strs = new BASE64Encoder().encode(bt);
        return strs;
    }
    public static byte[] encryptbytesAES(byte[] src,byte[] password) throws Exception {
        KeyGenerator kgen = KeyGenerator.getInstance("AES");
        kgen.init(128, new SecureRandom(new String(password).getBytes()));

        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(kgen.generateKey().getEncoded(), "AES"));

        return cipher.doFinal(new String(src).getBytes("utf-8"));
    }

    /**
     * AES类型解密字符串
     * @param src
     * @param password
     * @return
     * @throws Exception
     */
    public static String decryptStringAES(String src,String password) throws Exception {
        if (src == null)
            return null;
        BASE64Decoder decoder = new BASE64Decoder();
        byte[] buf = decoder.decodeBuffer(src);
        String bt = decryptbytesAES(buf,password.getBytes());
        return new String(bt);
    }

    public static String decryptbytesAES(byte[] src, byte[] password) throws Exception {
        KeyGenerator kgen = KeyGenerator.getInstance("AES");
        kgen.init(128, new SecureRandom(password));
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.DECRYPT_MODE, new SecretKeySpec(kgen.generateKey().getEncoded(), "AES"));
        byte[] decryptBytes = cipher.doFinal(src);
        return new String(decryptBytes);
    }

    /**
     * md5加密字符串
     * @param src
     * @return
     * @throws Exception
     */
    public static String md5(String src) throws Exception {
        MessageDigest md5 = MessageDigest.getInstance("md5");
        md5.update(src.getBytes());
        byte[] encoding = md5.digest();
        return bytesToHexString(encoding);
    }

    public static String md5andbase64(String src) throws Exception {
        MessageDigest md5 = MessageDigest.getInstance("md5");
        md5.update(src.getBytes());
        byte[] encoding = md5.digest();
        return new String(BASE64EncoderStream.encode(encoding));
    }


    /**
     * sha1加密
     * @param src
     * @return
     * @throws Exception
     */
    public static String sha1(String src) throws Exception {
        MessageDigest sha1 = MessageDigest.getInstance("SHA-1");
        sha1.update(src.getBytes());
        byte[] encoding = sha1.digest();
        return new String(BASE64EncoderStream.encode(encoding));
    }

    /**
     * sha256加密
     * @param src
     * @return
     * @throws Exception
     */
    public static String sha256(String src) throws Exception {
        MessageDigest sha256 = MessageDigest.getInstance("SHA-256");
        sha256.update(src.getBytes());
        byte[] encoding = sha256.digest();
        return new String(BASE64EncoderStream.encode(encoding));
    }

    /**
     * sha384加密
     * @param src
     * @return
     * @throws Exception
     */
    public static String sha384(String src) throws Exception {
        MessageDigest sha384 = MessageDigest.getInstance("SHA-384");
        sha384.update(src.getBytes());
        byte[] encoding = sha384.digest();
        return new String(BASE64EncoderStream.encode(encoding));
    }

    /**
     * sha512加密
     * @param src
     * @return
     * @throws Exception
     */
    public static String sha512(String src) throws Exception {
        MessageDigest sha512 = MessageDigest.getInstance("SHA-512");
        sha512.update(src.getBytes());
        byte[] encoding = sha512.digest();
        return new String(BASE64EncoderStream.encode(encoding));
    }
    /**
     * Convert byte[] to hex string.这里我们可以将byte转换成int，然后利用Integer.toHexString(int)来转换成16进制字符串。
     * @param src byte[] data
     * @return hex string
     */
    public static String bytesToHexString(byte[] src){
        StringBuilder stringBuilder = new StringBuilder("");
        if (src == null || src.length <= 0) {
            return null;
        }
        for (int i = 0; i < src.length; i++) {
            int v = src[i] & 0xFF;
            String hv = Integer.toHexString(v);
            if (hv.length() < 2) {
                stringBuilder.append(0);
            }
            stringBuilder.append(hv);
        }
        return stringBuilder.toString();
    }
    /**
     * Convert hex string to byte[]
     * @param hexString the hex string
     * @return byte[]
     */
    public static byte[] hexStringToBytes(String hexString) {
        if (hexString == null || hexString.equals("")) {
            return null;
        }
        hexString = hexString.toUpperCase();
        int length = hexString.length() / 2;
        char[] hexChars = hexString.toCharArray();
        byte[] d = new byte[length];
        for (int i = 0; i < length; i++) {
            int pos = i * 2;
            d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));
        }
        return d;
    }
    /**
     * Convert char to byte
     * @param c char
     * @return byte
     */
    private static byte charToByte(char c) {
        return (byte) "0123456789ABCDEF".indexOf(c);
    }
}
