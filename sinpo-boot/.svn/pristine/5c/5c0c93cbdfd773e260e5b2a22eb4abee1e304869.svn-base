package com.sinpo.common.utils;

import org.apache.commons.fileupload.util.Streams;
import org.springframework.web.servlet.ModelAndView;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.URL;
import java.util.Properties;
import java.util.Random;

/**
 * 图片工具类
 */
public class ImageUtil {

    private static final String QR_CODE_API = "http://qr.liantu.com/api.php?text=";//x内容出现 & 符号时，请用 %26 代替
    private static final int WINDOW_X = 300;
    private static final int WINDOW_Y = 450;
    private static final String FONT_YH = "微软雅黑";
    private static final String FONT_ST = "宋体";

    public void paintImage(OutputStream out, String title, String realname, String price, String alreadyBuy, String goodImge, String logoImage, String qrcode) throws IOException {
        BufferedImage img = new BufferedImage(WINDOW_X, WINDOW_Y, BufferedImage.TYPE_INT_RGB);
        BufferedImage good = ImageIO.read(new File(goodImge));
        BufferedImage qrCode = ImageIO.read(new URL(QR_CODE_API + qrcode));
        BufferedImage logo = ImageIO.read(new File(logoImage));
        Graphics g = img.getGraphics();//开启画图
        g.drawImage(good.getScaledInstance(93 * WINDOW_X / 100, 62 * WINDOW_Y / 100, Image.SCALE_DEFAULT), 3 * WINDOW_X / 100, 7 * WINDOW_Y / 100, null); // 绘制缩小后的图
        g.drawImage(qrCode.getScaledInstance(37 * WINDOW_X / 100, 25 * WINDOW_Y / 100, Image.SCALE_DEFAULT), 3 * WINDOW_X / 100, 72 * WINDOW_Y / 100, null);
        g.drawImage(logo.getScaledInstance(27 * WINDOW_X / 100, 11 * WINDOW_Y / 100, Image.SCALE_DEFAULT), 76 * WINDOW_X / 100, 90 * WINDOW_Y / 100, null);
        //绘制文字
        g.setColor(Color.WHITE);
        g.setFont(new Font(FONT_YH, Font.PLAIN, 14));
        g.drawString(realname + "倾情推荐", 33 * WINDOW_X / 100, 4 * WINDOW_Y / 100);
        g.drawString(title, 41 * WINDOW_X / 100, 74 * WINDOW_Y / 100);
        g.setFont(new Font(FONT_ST, Font.PLAIN, 12));
        g.drawString("轻松一扫,好贺不少", 41 * WINDOW_X / 100, 96 * WINDOW_Y / 100);
        g.setFont(new Font(FONT_YH, Font.PLAIN, 11));
        g.drawString(alreadyBuy, 60 * WINDOW_X / 100, 85 * WINDOW_Y / 100);//"3人已购"
        g.setColor(Color.RED);
        g.setFont(new Font(FONT_YH, Font.BOLD, 13));
        g.drawString(price, 41 * WINDOW_X / 100, 85 * WINDOW_Y / 100);//"￥208"
        g.dispose();
        ImageIO.write(img, "png", out);
        out.flush();
        out.close();
    }


    /**
     * 显示图片接口
     *
     * @param request
     * @param response
     * @return
     */
    public ModelAndView showImg(HttpServletRequest request, HttpServletResponse response) {
        String filePath = request.getParameter("path");
        response.setContentType("application/octet-stream");
        Properties pro = new Properties();
        FileInputStream fileInputStream = null;
        try {
            pro.load(getClass().getResourceAsStream("/jdbc.properties"));
            String rootPath = pro.getProperty("resource.url");
            filePath = rootPath + File.pathSeparator + filePath;
            File file = new File(filePath);
            if (!file.exists() || file.isDirectory()) {
                return null;
            }
            fileInputStream = new FileInputStream(filePath);
            Streams.copy(fileInputStream, response.getOutputStream(), true);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (fileInputStream != null) {
                try {
                    fileInputStream.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
        return null;
    }

    /**
     * 以字符串形式返回生成的验证码，同时输出一个图片
     *
     * @param width   图片的宽度
     * @param height  图片的高度
     * @param imgType 图片的类型
     * @param output  图片的输出流(图片将输出到这个流中)
     * @return 返回所生成的验证码(字符串)
     */
    public static String qrcode(final int width, final int height, final String imgType, OutputStream output) {
        StringBuffer sb = new StringBuffer();
        Random random = new Random();
        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
        Graphics graphic = image.getGraphics();
        graphic.setColor(Color.getColor("F8F8F8"));
        graphic.fillRect(0, 0, width, height);
        Color[] colors = new Color[]{Color.BLUE, Color.GRAY, Color.GREEN, Color.RED, Color.BLACK, Color.ORANGE,
                Color.CYAN};
        // 在 "画板"上生成干扰线条 ( 50 是线条个数)
        for (int i = 0; i < 50; i++) {
            graphic.setColor(colors[random.nextInt(colors.length)]);
            final int x = random.nextInt(width);
            final int y = random.nextInt(height);
            final int w = random.nextInt(20);
            final int h = random.nextInt(20);
            final int signA = random.nextBoolean() ? 1 : -1;
            final int signB = random.nextBoolean() ? 1 : -1;
            graphic.drawLine(x, y, x + w * signA, y + h * signB);
        }
        // 在 "画板"上绘制字母
        graphic.setFont(new Font("Comic Sans MS", Font.BOLD, 30));
        for (int i = 0; i < 6; i++) {
            final int temp = random.nextInt(26) + 97;
            String s = String.valueOf((char) temp);
            sb.append(s);
            graphic.setColor(colors[random.nextInt(colors.length)]);
            graphic.drawString(s, i * (width / 6), height - (height / 3));
        }
        graphic.dispose();
        try {
            ImageIO.write(image, imgType, output);
        } catch (IOException e) {
            e.printStackTrace();
        }
        return sb.toString();
    }
}
